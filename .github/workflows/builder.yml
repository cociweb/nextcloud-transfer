name: Build and Publish

on:
  push:
    branches:
      - master
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Set up Node.js
      uses: actions/setup-node@main

    - name: Install dependencies
      run: npm install

    - name: Build app
      run: make

    - name: Archive app
      run: |
        make dist
        ls -lah 

    - name: Prepare private key and certificate
      env:
        PRIVATE_KEY: ${{ secrets.SIGNING_KEY }}
      run: |
        printenv PRIVATE_KEY > nextcloud-transfer.key
      
    - name: Generate signature
      run: |
        if [ -f nextcloud-transfer.tar.gz ]; then
          openssl dgst -sha512 -sign nextcloud-transfer.key -out nextcloud-transfer.tar.gz.sig nextcloud-transfer.tar.gz
          openssl base64 -in nextcloud-transfer.tar.gz.sig -out nextcloud-transfer.tar.gz.sig.base64
        else
          echo "File not found: nextcloud-transfer.tar.gz" && exit 1
        fi

    - name: Save build artifacts
      uses: actions/upload-artifact@main
      with:
        name: build-artifacts
        path: |
          ./nextcloud-transfer.tar.gz
          ./nextcloud-transfer.tar.gz.sig
          ./nextcloud-transfer.tar.gz.sig.base64

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Determine if it is a release or pre-release
      id: determine_release_type
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v*.*.* ]]; then
          echo "prerelease_type=false" >> $GITHUB_ENV
        else
          echo "prerelease_type=true" >> $GITHUB_ENV
        fi

    - name: Check if release exists
      id: check_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.repository }}/releases/tags/${{ github.ref_name }}")
        release_id=$(echo $response | jq -r '.id')
        if [ -z "$release_id" ]; then
          echo "release_exists=false" >> $GITHUB_ENV
        else
          echo "release_exists=true" >> $GITHUB_ENV
          echo "release_id=$release_id" >> $GITHUB_ENV
        fi
    - name: Delete existing release
      if: env.release_exists == 'true'
      id: delete_release
      uses: cb80/delrel@latest
      with:
        tag: ${{ github.ref_name }}
        token: ${{ secrets.GITHUB_TOKEN }}


    - name: Create
      id: create_release
      uses: actions/create-release@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Automated release of the app.
        draft: false
        prerelease: ${{ env.prerelease_type }}

    - name: Download build artifacts
      uses: actions/download-artifact@main
      with:
        name: build-artifacts
      
  
    - name: Upload release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@main
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./nextcloud-transfer.tar.gz
        asset_name: nextcloud-transfer.tar.gz
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload signature
      uses: actions/upload-release-asset@main
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./nextcloud-transfer.tar.gz.sig.base64
        asset_name: nextcloud-transfer.tar.gz.sig.base64
        asset_content_type: text/plain
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sign:
    needs: [build, release]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@main
      with:
        path: transfer-src

    - name: Download build artifacts
      uses: actions/download-artifact@main
      with:
        name: build-artifacts
        
    - name: Extract build artifacts
      run: |
        mkdir -p transfer
        tar -xzf nextcloud-transfer.tar.gz -C transfer

    - name: Prepare private key and certificate
      id: certificate_creation
      env:
        PRIVATE_KEY: ${{ secrets.SIGNING_KEY }}
      run: |
        mkdir -p certificates
        curl -o certificates/transfer.csr https://raw.githubusercontent.com/nextcloud/app-certificate-requests/refs/heads/master/transfer/transfer.csr
        curl -o certificates/transfer.crt https://raw.githubusercontent.com/nextcloud/app-certificate-requests/refs/heads/master/transfer/transfer.crt
        printenv PRIVATE_KEY > certificates/transfer.key
        ls -lah certificates
        
    - name: Prepare config file
      run: |
        mkdir -p config
        echo "<?php 'config_is_read_only' => true, " > config/config.php
        chmod -R 777 config

    - name: Run occ integrity:sign-app in Docker
      run: |
        docker run --rm \
          --user 33 \
          -v "$(pwd)/transfer/transfer:/var/www/html/transfer:rw" \
          -v "$(pwd)/certificates:/var/www/.nextcloud/certificates:rw" \
          -v "$(pwd)/config:/var/www/html/config:rw" \
          -w /var/www/html \
          nextcloud:latest \
          sh -c "sleep 30 && ls -lah ~/ && \
          php /usr/src/nextcloud/occ integrity:sign-app \
            --privateKey==~/.nextcloud/certificates/transfer.key \
            --certificate=~/.nextcloud/certificates/transfer.crt \
            --path=/var/www/html/transfer/ && \
          ls -lah /var/www/html && ls -lah /var/www/html/config && ls -lah /var/www/.nextcloud/certificates && ls -lah /var/www/html/transfer"
