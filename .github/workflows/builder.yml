name: Build and Publish

on:
  push:
    branches:
      - master
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Set up Node.js
      uses: actions/setup-node@main

    - name: Install dependencies
      run: npm install

    - name: Build app
      run: make

    - name: Archive app
      run: |
        make dist
        ls -lah 

    - name: Save build artifacts
      uses: actions/upload-artifact@main
      with:
        name: build-artifacts
        path: ./nextcloud-transfer.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Determine if it is a release or pre-release
      id: determine_release_type
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v*.*.* ]]; then
          echo "release_type=false" >> $GITHUB_ENV
        else
          echo "release_type=true" >> $GITHUB_ENV
        fi

    - name: Check if release exists
      id: check_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
          | jq -r '.id')
        if [[ "$release_id" == "null" ]]; then
          echo "release_exists=false" >> $GITHUB_ENV
        else
          echo "release_exists=true" >> $GITHUB_ENV
          echo "release_id=$release_id" >> $GITHUB_ENV
        fi

    - name: Create
      if: ${{ env.release_exists }} == 'false'
      id: create_release
      uses: actions/create-release@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Automated release of the app.
        draft: false
        prerelease: ${{ env.release_type }}

    - name: Update existing Release
      if: ${{ env.release_exists }} == 'true'
      run: |
        curl -s -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
          -d '{"tag_name":"${{ github.ref_name }}","name":"Release ${{ github.ref_name }}","body":"Automated release of the app.","draft":false,"prerelease":'${{ env.release_type }}'}' \
          "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.repository }}/releases/${{ env.release_id }}"

    - name: Download build artifacts
      uses: actions/download-artifact@main
      with:
        name: build-artifacts

    - name: Prepare private key and certificate
      env:
        PRIVATE_KEY: ${{ secrets.SIGNING_KEY }}
      run: |
        printenv PRIVATE_KEY > transfer.key
      
    - name: Generate signature
      run: |
        if [ -f nextcloud-transfer.tar.gz ]; then
          openssl dgst -sha512 -sign transfer.key -out nextcloud-transfer.tar.gz.sig nextcloud-transfer.tar.gz
          openssl base64 -in nextcloud-transfer.tar.gz.sig -out nextcloud-transfer.tar.gz.sig.base64
        else
          echo "File not found: nextcloud-transfer.tar.gz" && exit 1
        fi
  
    - name: Upload release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@main
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./nextcloud-transfer.tar.gz
        asset_name: nextcloud-transfer.tar.gz
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload signature
      uses: actions/upload-release-asset@main
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./nextcloud-transfer.tar.gz.sig.base64
        asset_name: nextcloud-transfer.tar.gz.sig.base64
        asset_content_type: text/plain
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sign:
    needs: [build, release]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2


    - name: Prepare private key and certificate
      env:
        PRIVATE_KEY: ${{ secrets.SIGNING_KEY }}
      run: |
        printenv PRIVATE_KEY > private.key


    - name: Run occ integrity:sign-app in Docker
      run: |
        docker run --rm \
          --user 33 \
          -v "$(pwd):/var/www/html" \
          -w /var/www/html \
          nextcloud:latest \
          sh -c "sleep 30 && \
          occ integrity:sign-app \
            --privateKey=private.key \
            --certificate=appinfo/transfer.crt \
            --path=/var/www/html/"
